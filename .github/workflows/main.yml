name: Run Autotests and Publish Report

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      test_group:
        description: 'Which test group to run?'
        required: true
        default: 'smoke'
        type: choice
        options: [ smoke, regression, api, ui, "api or ui" ]

permissions:
  contents: read
  pages: write
  id-token: write
  packages: write

jobs:
  # ЗАДАНИЕ 1: Сборка образа (остается без изменений, оно работает)
  build:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.create_names.outputs.image_name }}
      image_tag: ${{ steps.create_names.outputs.image_tag }}
    steps:
      - name: 1. Get code from repository
        uses: actions/checkout@v4

      - name: 2. Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 3. Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 4. Create lower-case image name and unique tag
        id: create_names
        run: |
          echo "image_name=ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: 5. Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.create_names.outputs.image_name }}:${{ steps.create_names.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ЗАДАНИЕ 2: Запуск тестов
  run-tests-parallel:
    # Запускать это задание, ТОЛЬКО если событие НЕ ручное
    if: github.event_name != 'workflow_dispatch'
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-group: [ api, ui ] # Наша матрица для параллелизма
    steps:
      - name: 1. Run tests for ${{ matrix.test-group }}
        env: # <-- Создаем переменные окружения для этого шага
          IMAGE_NAME: ${{ needs.build.outputs.image_name }}
          IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
        run: >
          docker run --rm --ipc=host --init
          -v $(pwd)/allure-results-${{ matrix.test-group }}:/app/allure-results
          -e BASE_URL=${{ secrets.BASE_URL }}
          -e ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
          -e ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          $IMAGE_NAME:$IMAGE_TAG
          pytest -m ${{ matrix.test-group }} -n auto --alluredir=allure-results

      - name: 2. Upload results for ${{ matrix.test-group }}
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-${{ matrix.test-group }}
          path: allure-results-${{ matrix.test-group }}

    # ЗАДАНИЕ ДЛЯ РУЧНОГО ЗАПУСКА (ОДНО ЗАДАНИЕ)
  run-tests-manual:
    # Запускать это задание, ТОЛЬКО если событие РУЧНОЕ
    if: github.event_name == 'workflow_dispatch'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 1. Run selected test group
        env:
          IMAGE_NAME: ${{ needs.build.outputs.image_name }}
          IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
        run: >
          docker run --rm --ipc=host --init
          -v $(pwd)/allure-results:/app/allure-results
          -e BASE_URL=${{ secrets.BASE_URL }}
          -e ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
          -e ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          $IMAGE_NAME:$IMAGE_TAG
          pytest -m "${{ github.event.inputs.test_group }}" -n auto --alluredir=allure-results

      - name: 2. Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results # Только один артефакт
          path: allure-results

  # ЗАДАНИЕ 3: Генерация отчета и подготовка к деплою
  publish-report:
    needs: [run-tests-parallel, run-tests-manual]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker pull image
        run: docker pull ${{ needs.build.outputs.image_name }}:${{ needs.build.outputs.image_tag }}
      - name: 1. Download all test results
        uses: actions/download-artifact@v4
        with:
          path: allure-results
          merge-multiple: true

      - name: 2. Create Allure environment file
        run: |
          echo "STAND_URL=${{ secrets.BASE_URL }}" >> allure-results/environment.properties
          echo "BROWSER=Chromium (in Docker)" >> allure-results/environment.properties
          echo "TRIGGERED_BY=${{ github.actor }}" >> allure-results/environment.properties
          echo "BRANCH=${{ github.ref_name }}" >> allure-results/environment.properties
          echo "COMMIT_HASH=${{ github.sha }}" >> allure-results/environment.properties

      - name: 3. Generate Allure Report
        env: # <-- И ЗДЕСЬ ТОЖЕ СОЗДАЕМ ПЕРЕМЕННЫЕ
          IMAGE_NAME: ${{ needs.build.outputs.image_name }}
          IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
        run: >
          docker run --rm 
          -v $(pwd)/allure-results:/app/allure-results
          -v $(pwd)/allure-report:/app/allure-report
          $IMAGE_NAME:$IMAGE_TAG
          allure generate allure-results --clean -o allure-report

      - name: 4. Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./allure-report # Указываем папку с готовым отчетом

  # ЗАДАНИЕ 4: Деплой на GitHub Pages
  deploy:
    needs: publish-report
    if: always()
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4