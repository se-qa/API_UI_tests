name: Run Autotests and Publish Report

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      test_group:
        description: 'Which test group to run?'
        required: true
        default: 'smoke'
        type: choice
        options: [ smoke, regression, api, ui, "api or ui" ]

permissions:
  contents: read
  pages: write
  id-token: write
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run flake8
        run: flake8 .

  build:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  run-tests-parallel:
    if: github.event_name != 'workflow_dispatch'
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-group: [ api, ui ]
    steps:
      - run: >
          docker run --rm --ipc=host --init
          -v $(pwd)/allure-results-${{ matrix.test-group }}:/app/allure-results
          -e BASE_URL=${{ secrets.BASE_URL }}
          -e ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
          -e ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          pytest -m ${{ matrix.test-group }} -n auto --alluredir=allure-results
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-${{ matrix.test-group }}
          path: allure-results-${{ matrix.test-group }}

  run-tests-manual:
    if: github.event_name == 'workflow_dispatch'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - run: >
          docker run --rm --ipc=host --init
          -v $(pwd)/allure-results:/app/allure-results
          -e BASE_URL=${{ secrets.BASE_URL }}
          -e ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
          -e ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          pytest -m "${{ github.event.inputs.test_group }}" -n auto --alluredir=allure-results
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results
          path: allure-results

  publish-report:
    needs: [run-tests-parallel, run-tests-manual]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: allure-results
          merge-multiple: true
      - run: |
          echo "STAND_URL=${{ secrets.BASE_URL }}" >> allure-results/environment.properties
          echo "BROWSER=Chromium (in Docker)" >> allure-results/environment.properties
          echo "TRIGGERED_BY=${{ github.actor }}" >> allure-results/environment.properties
          echo "BRANCH=${{ github.ref_name }}" >> allure-results/environment.properties
          echo "COMMIT_HASH=${{ github.sha }}" >> allure-results/environment.properties
      - run: >
          docker run --rm 
          -v $(pwd)/allure-results:/app/allure-results
          -v $(pwd)/allure-report:/app/allure-report
          ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          allure generate allure-results --clean -o allure-report
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./allure-report

  deploy:
    needs: publish-report
    if: always()
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
