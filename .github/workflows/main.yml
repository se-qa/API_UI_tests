name: Run Autotests and Publish Report

on:
  push:
    branches: [ main, master ]

permissions:
  contents: read
  pages: write
  id-token: write
  packages: write

jobs:
  # ЗАДАНИЕ 1: Сборка и ПУБЛИКАЦИЯ Docker-образа с кэшированием
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Get code from repository
        uses: actions/checkout@v4

      - name: 2. Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 3. Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 4. Define image name and tag
        run: echo "IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest" >> $GITHUB_ENV

      - name: 5. Build and push image with caching
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ЗАДАНИЕ 2: Запуск API-тестов (параллельно с UI)
  run-api-tests:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: 1. Get code from repository
        uses: actions/checkout@v4

      - name: 2. Define image name
        run: echo "IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest" >> $GITHUB_ENV

      - name: 3. Pull the tested image
        run: docker pull ${{ env.IMAGE_NAME }}

      - name: 4. Run API tests
        # БЕЗ continue-on-error. Если тесты упадут, этот job провалится.
        run: >
          docker run --rm
          -v $(pwd)/allure-results-api:/app/allure-results
          -e BASE_URL=${{ secrets.BASE_URL }}
          -e ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
          -e ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          ${{ env.IMAGE_NAME }}
          pytest -m api --alluredir=allure-results

      - name: 5. Upload API results
        uses: actions/upload-artifact@v4
        if: always() # Выгружаем отчет всегда
        with:
          name: allure-results-api
          path: allure-results-api

  # ЗАДАНИЕ 3: Запуск UI-тестов (параллельно с API)
  run-ui-tests:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: 1. Get code from repository
        uses: actions/checkout@v4

      - name: 2. Define image name
        run: echo "IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest" >> $GITHUB_ENV

      - name: 3. Pull the tested image
        run: docker pull ${{ env.IMAGE_NAME }}

      - name: 4. Run UI tests
        # БЕЗ continue-on-error. Если тесты упадут, этот job провалится.
        run: >
          docker run --rm --ipc=host --init
          -v $(pwd)/allure-results-ui:/app/allure-results
          ${{ env.IMAGE_NAME }}
          pytest -m ui --alluredir=allure-results

      - name: 5. Upload UI results
        uses: actions/upload-artifact@v4
        if: always() # Выгружаем отчет всегда
        with:
          name: allure-results-ui
          path: allure-results-ui

  # ЗАДАНИЕ 4: Публикация единого отчета
  publish-report:
    needs: [run-api-tests, run-ui-tests]
    if: always() # Запускается всегда, чтобы опубликовать отчет, даже если тесты упали
    runs-on: ubuntu-latest
    steps:
      - name: 1. Download all test results
        uses: actions/download-artifact@v4
        with:
          # Скачиваем все артефакты (и API, и UI)
          path: allure-results

      - name: 2. Generate and deploy report
        uses: simple-elf/allure-report-action@v1.7
        with:
          # Указываем папку, куда скачались все результаты
          allure_results: allure-results
          gh_pages: gh-pages
          allure_history: allure-history

      - name: 3. Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-history
          keep_files: true