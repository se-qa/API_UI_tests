stages:
  - lint
  - build
  - test
  - report
  - deploy
  - notify

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  IMAGE_TAG: $CI_COMMIT_SHA
  DOCKER_DRIVER: overlay2

# ---------- LINT ----------
lint:
  stage: lint
  image: python:3.13
  script:
    - pip install --upgrade pip
    - pip install flake8
    - flake8 .
  only: [main, master]

# ---------- BUILD ----------
build:
  stage: build
  image: docker:28.0.0
  services: [docker:dind]
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
    - docker push $IMAGE_NAME:latest
  only: [main, master]

# ---------- SMOKE ----------
smoke-tests:
  stage: test
  image: docker:28.0.0
  services: [docker:dind]
  needs: [build]
  script:
    - mkdir -p allure-results-smoke
    - export DECODED_ADMIN_USERNAME=$(echo $ADMIN_USERNAME | base64 -d)
    - >
      docker run --rm --ipc=host --init
      -v $(pwd)/allure-results-smoke:/app/allure-results
      -e BASE_URL=$BASE_URL
      -e ADMIN_USERNAME=$DECODED_ADMIN_USERNAME
      -e ADMIN_PASSWORD=$ADMIN_PASSWORD
      $IMAGE_NAME:$IMAGE_TAG
      pytest -m smoke -n auto --alluredir=/app/allure-results
  artifacts:
    paths: [allure-results-smoke]
    when: always
    expire_in: 7 days

# ---------- PARALLEL (api/ui) ----------
run-tests-parallel:
  stage: test
  image: docker:28.0.0
  services: [docker:dind]
  needs: [smoke-tests]
  parallel:
    matrix:
      - TEST_GROUP: api
      - TEST_GROUP: ui
  script:
    - mkdir -p allure-results-${TEST_GROUP}
    - export DECODED_ADMIN_USERNAME=$(echo $ADMIN_USERNAME | base64 -d)
    - >
      docker run --rm --ipc=host --init
      -v $(pwd)/allure-results-${TEST_GROUP}:/app/allure-results
      -e BASE_URL=$BASE_URL
      -e ADMIN_USERNAME=$DECODED_ADMIN_USERNAME
      -e ADMIN_PASSWORD=$ADMIN_PASSWORD
      $IMAGE_NAME:$IMAGE_TAG
      pytest -m $TEST_GROUP -n auto --alluredir=/app/allure-results
  artifacts:
    paths:
      - allure-results-${TEST_GROUP}
    when: always
    expire_in: 7 days

# ---------- PUBLISH REPORT ----------
publish-report:
  stage: report
  image: openjdk:17-jdk-slim
  # запускать всегда и собирать артефакты даже если тесты упали
  needs:
    - job: smoke-tests
      artifacts: true
      optional: true
    - job: run-tests-parallel
      artifacts: true
      optional: true
  when: always
  script:
    - apt-get update && apt-get install -y wget unzip
    - wget -q https://github.com/allure-framework/allure2/releases/download/2.34.1/allure-2.34.1.zip
    - unzip -q allure-2.34.1.zip
    - mkdir -p merged-results
    - cp -r allure-results-smoke/* merged-results/  || true
    - cp -r allure-results-api/*   merged-results/  || true
    - cp -r allure-results-ui/*    merged-results/  || true
    - ./allure-2.34.1/bin/allure generate merged-results --clean -o allure-report || true
  artifacts:
    paths: [allure-report]
    expire_in: 7 days

# ---------- DEPLOY PAGES ----------
pages:
  stage: deploy
  image: alpine:latest
  needs:
    - job: publish-report
      optional: true
  when: always
  script:
    - mv allure-report public || mkdir -p public
  artifacts:
    paths: [public]
  only: [main, master]

# ---------- TELEGRAM ----------
notify-telegram:
  stage: notify
  image: curlimages/curl:8.4.0
  needs:
    - job: pages
      optional: true
  when: always
  script: |
    STATUS=$CI_JOB_STATUS
    REPORT_URL="https://$CI_PROJECT_NAMESPACE.gitlab.io/$CI_PROJECT_NAME/"
    COMMIT_MSG=$(printf "%s" "$CI_COMMIT_MESSAGE" | sed -r 's/([_*`()~>#+=|{}.!-])/\\\1/g')

    curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
      -d chat_id="$TELEGRAM_CHAT_ID" \
      -d parse_mode=MarkdownV2 \
      -d text="*✅ Pipeline Status:* ${STATUS}

    *📦 Repo:* [${CI_PROJECT_NAME}](${CI_PROJECT_URL})
    *🌿 Branch:* \`${CI_COMMIT_REF_NAME}\`
    *📝 Commit2:* ${COMMIT_MSG}
    *👤 Triggered by:* ${GITLAB_USER_NAME}
    
    [📊 Allure Report](${REPORT_URL})"
